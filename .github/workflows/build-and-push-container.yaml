name: Container Build and Push
on:
  push:
    branches: [main]
    tags: ["v*.*.*"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Set docker compose override
        run: |
          tag="$( cut -d ',' -f 1 <<< "${{ steps.meta.outputs.tags }}" )"
          printf 'version: "3.8"\nservices:\n  api:\n    image: %s\n' "$tag" > docker-compose.override.yml
          cat docker-compose.override.yml
      - name: Build locally
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}"
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Start test environment
        run: |
          docker compose up --wait
      - name: Run End to End tests
        working-directory: server
        run: go test -tags=e2e -v ./...
      - name: Shut down test environment
        if: always()
        run: |
          docker compose down
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:server"
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
