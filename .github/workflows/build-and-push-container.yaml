name: Container Build and Push
on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    types: [opened, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APPLICATION_VERSION: ${{ github.ref_name }}

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Set docker compose override
        run: |
          readarray -t tags < <(echo "${{ steps.meta.outputs.tags }}")
          printf 'version: "3.8"\nservices:\n  api:\n    image: %s\n' "${tags[0]}" > docker-compose.override.yml
          cat docker-compose.override.yml
      - name: Build locally
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}"
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Start test environment
        run: |
          docker compose up --wait
      - name: Run End to End tests
        run: go test -tags=e2e,integration -v ./...
        env:
          DB_USERNAME: "root"
          DB_PASSWORD: "mongopwd"
          DB_HOST: "localhost"
          DB_PORT: "27017"
      - name: Shut down test environment
        if: always()
        run: |
          docker compose down
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}"
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  helm-build-and-push:
    name: Build and Push Helm Chart
    runs-on: ubuntu-latest
    needs: [docker-build-and-push]
    steps:
      - uses: actions/checkout@v3
      - name: Helm Install
        uses: azure/setup-helm@v1
      - name: Python install
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.1

      - name: Update Helm chart version
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        run: |
          cd ./helm/library-api
          echo "App Version: $APPLICATION_VERSION"
          chartVersion="${APPLICATION_VERSION:1}"
          echo "Chart Version: $chartVersion"
          sed -i "s/version\: 0\.1\.0/version\: $chartVersion/" Chart.yaml
          cat Chart.yaml

      - name: Run chart-testing (lint)
        run: ct lint --chart-dirs helm/library-api --charts helm/library-api

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pushing Helm Chart
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        run: |
          REPO_OWNER=`echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]'`
          helm package helm/library-api --app-version $APPLICATION_VERSION
          # Get packed chart file name
          PKG_NAME=`ls library-api-*.tgz`
          helm push ${PKG_NAME} oci://ghcr.io/${REPO_OWNER}/charts
